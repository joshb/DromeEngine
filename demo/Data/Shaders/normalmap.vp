uniform vec3 cameraPosition;
uniform vec3 lightPosition[3];
uniform vec3 lightColor[3];
uniform mat4 shadowMatrix[3];
uniform vec3 objectPosition;

varying vec3 lightDirection[3];
varying vec3 lightPositionOut[3];
varying vec3 lightHalfAngle[3];
varying vec4 shadowCoords[3];

void
main()
{
	vec4 objectVertex = gl_Vertex + vec4(objectPosition, 0.0);

	mat3 tangentSpace = mat3(gl_MultiTexCoord1.xyz, gl_MultiTexCoord2.xyz, gl_Normal.xyz);
	vec3 cameraDirection = normalize((cameraPosition - objectVertex.xyz) * tangentSpace);

	for(int i = 0; i < 3; ++i) {
		lightPositionOut[i] = lightPosition[i] - objectVertex.xyz;
		lightDirection[i] = lightPositionOut[i] * tangentSpace;
		lightHalfAngle[i] = cameraDirection + lightDirection[i];

		shadowCoords[i] = shadowMatrix[i] * objectVertex;
	}

	gl_TexCoord[0] = gl_MultiTexCoord0;
	gl_Position = gl_ModelViewProjectionMatrix * objectVertex;
}
